{"version":3,"file":"index.esm.js","sources":["../node_modules/@x-drive/utils/dist/index.esm.js","../src/index.ts"],"sourcesContent":["/**\r\n * 数据类型判断\r\n * @param  subject 待判断的数据\r\n * @param  type    数据类型名字\r\n * @return         判断结果\r\n */\r\nfunction is(subject, type) {\r\n    return Object.prototype.toString.call(subject).substr(8, type.length).toLowerCase() === type;\r\n}\n\n/**\r\n * 是否是数组\r\n * @param  subject 待判断的数据\r\n */\r\nfunction isObject(subject) {\r\n    return is(subject, \"object\");\r\n}\n\n/**\r\n * 是否 undefined\r\n * @param  subject 待判断的数据\r\n */\r\nfunction isUndefined(subject) {\r\n    return is(subject, \"undefined\");\r\n}\n\n/**\r\n * 带花括号标签检测正则\r\n * @type {RegExp}\r\n */\r\nvar labelReplaceExp = /\\{(\\w+)\\}/g;\r\n/**\r\n * 批量替换字符串中带花括号标签为指定数据\r\n * @param  tpl  待处理的字符串\r\n * @param  data 替换数据\r\n * @param  keep 是否保留未能解析的标签\r\n * @return      替换后端字符串\r\n * @example\r\n * ```tsx\r\n * labelReplace('{a}/{b}/c', {a: 1, b: 2}) // 1/2/c\r\n * labelReplace('{a}/{b}/c', {a: 1}, true) // 1/{b}/c\r\n * ```\r\n */\r\nfunction labelReplace(tpl, data, keep) {\n    if ( keep === void 0 ) keep = false;\n\r\n    return tpl.replace(labelReplaceExp, function (_, key) {\r\n        var re = isObject(data) ? data[key] : data;\r\n        if (isUndefined(re) && keep) {\r\n            return _;\r\n        }\r\n        return re;\r\n    });\r\n}\n\n/**\r\n * 是否是数组且长度大于0\r\n * @param  subject 待判断的数据\r\n */\r\nfunction isValidArray(subject) {\r\n    return Array.isArray(subject) && subject.length > 0;\r\n}\n\n/**\r\n * 伪数组转成数组\r\n * @param   args 伪数组对象\r\n * @return       转化后的数组\r\n */\r\nfunction toArray(args) {\r\n    return Array.prototype.slice.call(args);\r\n}\n\n/**\r\n * 是否是函数\r\n * @param  subject 待判断的数据\r\n */\r\nfunction isFunction(subject) {\r\n    return is(subject, \"function\");\r\n}\n\n/**\r\n * 是否是数组\r\n * @param  subject 待判断的数据\r\n */\r\nfunction isArray(subject) {\r\n    return Array.isArray(subject);\r\n}\n\n/**\r\n * 通用遍历函数\r\n * @param  data    待遍历数据\r\n * @param  handler 处理函数\r\n * @param  context 作用域\r\n */\r\nfunction each(data, handler, context) {\r\n    context = context || this;\r\n    var hasHandler = isFunction(handler);\r\n    if (isArray(data)) {\r\n        for (var i = 0; i < data.length; i++) {\r\n            var re = true;\r\n            if (hasHandler) {\r\n                re = handler.call(context, data[i], i);\r\n            }\r\n            if (re === false) {\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    else if (isObject(data)) {\r\n        var keys = Object.keys(data);\r\n        for (var i$1 = 0; i$1 < keys.length; i$1++) {\r\n            var re$1 = true;\r\n            if (hasHandler) {\r\n                re$1 = handler.call(context, data[keys[i$1]], keys[i$1]);\r\n            }\r\n            if (re$1 === false) {\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\n\n/**\r\n * 对象扩展方法\r\n * @return 合并后的对象\r\n */\r\nfunction extend() {\n    var args = [], len = arguments.length;\n    while ( len-- ) args[ len ] = arguments[ len ];\n\r\n    var dat = args.shift();\r\n    if (dat) {\r\n        if (args.length) {\r\n            while (args.length) {\r\n                var item = args.shift();\r\n                if (item) {\r\n                    each(item, function (val, key) {\r\n                        dat[key] = val;\r\n                    });\r\n                }\r\n            }\r\n        }\r\n        return dat;\r\n    }\r\n    return null;\r\n}\n\n/**\r\n * 合并\r\n * @param target  合并基准对象\r\n * @param sources 后续合并对象\r\n */\r\nfunction merge(target) {\n    var obj, obj$1;\n\n    var sources = [], len = arguments.length - 1;\n    while ( len-- > 0 ) sources[ len ] = arguments[ len + 1 ];\r\n    if (!sources.length)\r\n        { return target; }\r\n    var source = sources.shift();\r\n    if (isObject(target) && isObject(source)) {\r\n        for (var key in source) {\r\n            if (isObject(source[key])) {\r\n                if (!target[key]) {\r\n                    Object.assign(target, ( obj = {}, obj[key] = {}, obj ));\r\n                }\r\n                merge(target[key], source[key]);\r\n            }\r\n            else {\r\n                Object.assign(target, ( obj$1 = {}, obj$1[key] = source[key], obj$1 ));\r\n            }\r\n        }\r\n    }\r\n    return merge.apply(void 0, [ target ].concat( sources ));\r\n}\n\n/**\r\n * 是否是字符串\r\n * @param  subject 待判断的数据\r\n */\r\nfunction isString(subject) {\r\n    return is(subject, \"string\");\r\n}\n\n/**\r\n * 大写字母匹配正则\r\n */\r\nvar UPPER_CASE_REGEXP = /[A-Z]/g;\r\n/**\r\n * 转化为蛇形命名\r\n * @param  str 待处理的字符串\r\n * @return     处理后的字符串\r\n */\r\nfunction toUnderlineName(str) {\r\n    if (isString(str)) {\r\n        return str.replace(UPPER_CASE_REGEXP, function (m, i) { return (\"\" + (i ? '_' : '') + (m.toLowerCase())); });\r\n    }\r\n    return str;\r\n}\n\n/**\r\n * 简单复制\r\n * @param  item 原始数据\r\n * @return      复制后的数据\r\n */\r\nfunction copy(item) {\r\n    return JSON.parse(JSON.stringify(item));\r\n}\n\n/**\r\n * 格式化数字, 自动补0前续\r\n * @param  number 要格式化的数字\r\n * @param  size   格式化后出来的数字位数\r\n * @return        格式化结果\r\n */\r\nfunction fix0(number, size) {\r\n    number = number.toString();\r\n    while ((number).length < size) {\r\n        number = '0' + number;\r\n    }\r\n    return number;\r\n}\n\n/**\r\n * 是否是数字\r\n * @param  subject 待判断的数据\r\n */\r\nfunction isNumber(subject) {\r\n    return !isNaN(subject) && is(subject, \"number\");\r\n}\n\n/**\r\n * 是否是 null\r\n * @param  subject 待判断的数据\r\n */\r\nfunction isNull(subject) {\r\n    return is(subject, \"null\");\r\n}\n\n/**\r\n * 按位数格式化数字\r\n * @param  val       要格式化的数字\r\n * @param  separator 分割符\r\n * @param  size      分割位数间隔\r\n * @return           格式化完的字符串\r\n */\r\nfunction numberFormat(val, separator, size) {\r\n    if (!isNumber(val)) {\r\n        return \"0\";\r\n    }\r\n    if (isUndefined(separator) || isNull(separator)) {\r\n        separator = \",\";\r\n    }\r\n    if (!isNumber(size)) {\r\n        size = 3;\r\n    }\r\n    var last = size;\r\n    val = val.toString();\r\n    var pos = val.indexOf(\".\");\r\n    var res = \"\";\r\n    if (pos === -1) {\r\n        pos = val.length;\r\n    }\r\n    else {\r\n        res = val.substr(pos);\r\n    }\r\n    if (val.charAt(0) === \"-\") {\r\n        last++;\r\n    }\r\n    while (pos > last) {\r\n        pos -= size;\r\n        res = separator + val.substr(pos, size) + res;\r\n    }\r\n    if (pos) {\r\n        res = val.substr(0, pos) + res;\r\n    }\r\n    return res;\r\n}\n\n/**\r\n * 数组随机分布\r\n * @param  arr  原始数组\r\n * @return      打乱后的数组\r\n */\r\nfunction shuffle(arr) {\r\n    for (var i = arr.length - 1; i >= 0; i--) {\r\n        var rIndex = Math.floor(Math.random() * (i + 1));\r\n        var item = arr[rIndex];\r\n        arr[rIndex] = arr[i];\r\n        arr[i] = item;\r\n    }\r\n    return arr;\r\n}\n\n/**\r\n * 获取包含指定范围内的随机数\r\n * @param  max 最大范围(包含)\r\n * @param  min 最小范围(包含，默认 0)\r\n * @return     随机数\r\n */\r\nfunction random(max, min) {\r\n    if (min === undefined) {\r\n        min = 0;\r\n    }\r\n    return Math.round(Math.random() * (max - min) + min);\r\n}\n\n/**\r\n * 序列化请求参数\r\n * @param  query 参数对象\r\n * @return       参数字符串\r\n */\r\nfunction serialize(query, encode) {\n    if ( encode === void 0 ) encode = false;\n\r\n    return Object.keys(query)\r\n        .map(function (key) { return (key + \"=\" + (encode ? encodeURIComponent(query[key]) : query[key])); })\r\n        .join('&');\r\n}\n\n/**\r\n * 请求参数对象转成请求参数字符串\r\n * @param dat 请求参数\r\n */\r\nfunction queryString(dat) {\r\n    var queryStr;\r\n    if (dat) {\r\n        queryStr = Object.keys(dat)\r\n            .map(function (key) {\r\n            return (key + \"=\" + (encodeURIComponent(dat[key])));\r\n        })\r\n            .join('&');\r\n    }\r\n    else {\r\n        queryStr = '';\r\n    }\r\n    return queryStr;\r\n}\n\n/**\r\n * 时间分割正则\r\n */\r\nvar DATE_REGEXP = /[^\\d]+/;\r\n/**\r\n * 转换对象为JS Date对象\r\n * @param   date   <可选> 日期数据(时间戳, 字符串, Date对象, 空)\r\n * @param   offset 修正偏移的秒数\r\n * @return         返回JS Date对象 / NULL 日期格式错误\r\n */\r\nfunction toDate(date, offset) {\r\n    var ts;\r\n    if (date instanceof Date) {\r\n        ts = date;\r\n    }\r\n    else if (isNumber(date)) {\r\n        ts = new Date(date);\r\n    }\r\n    else if (isNaN(+date)) {\r\n        if (isString(date)) {\r\n            date = date.split(DATE_REGEXP);\r\n            if (date.length === 3) {\r\n                ts = new Date(+date[0], date[1] - 1, +date[2], 0, 0, 0, 0);\r\n                if (isNaN(+ts)) {\r\n                    ts = null;\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n    if (!ts) {\r\n        if (!date) {\r\n            return null;\r\n        }\r\n        ts = new Date();\r\n        if (date > 5e8) {\r\n            // 时间戳\r\n            ts.setTime(date * 1000);\r\n        }\r\n        else {\r\n            // 时间偏移(秒数)\r\n            ts.setTime(ts.getTime() + date * 1000);\r\n        }\r\n    }\r\n    if (!isNaN(Number(offset))) {\r\n        ts.setTime(ts.getTime() + offset * 1000);\r\n    }\r\n    return ts;\r\n}\n\n/**\r\n * 日期格式化格式匹配正则\r\n */\r\nvar FORMAT_REGEXP = /[YymndjNwaAghGHisT]/g;\r\n/**\r\n * 按照指定格式将日期对象或时间戳转化为日期字符串\r\n * @param  date   日期对象或时间戳\r\n * @param  format 日期格式\r\n * @param  offset 修正偏移的秒数\r\n * @return        日期\r\n */\r\nfunction date(date, format, offset) {\r\n    format = format || \"Y-m-d H:i:s\";\r\n    var timestamp = toDate(date, offset);\r\n    if (timestamp === null) {\r\n        timestamp = new Date();\r\n    }\r\n    return format.replace(FORMAT_REGEXP, function formatCallback(tag) {\r\n        switch (tag) {\r\n            case \"Y\": return timestamp.getFullYear();\r\n            case \"y\": return timestamp.getFullYear() % 100;\r\n            case \"m\": return fix0(timestamp.getMonth() + 1, 2);\r\n            case \"n\": return timestamp.getMonth() + 1;\r\n            case \"d\": return fix0(timestamp.getDate(), 2);\r\n            case \"j\": return timestamp.getDate();\r\n            case \"N\": return timestamp.getDay();\r\n            case \"w\": return timestamp.getDay() % 7;\r\n            case \"a\": return timestamp.getHours() < 12 ? \"am\" : \"pm\";\r\n            case \"A\": return timestamp.getHours() < 12 ? \"AM\" : \"PM\";\r\n            case \"g\": return timestamp.getHours() % 12 + 1;\r\n            case \"h\": return fix0(timestamp.getHours() % 12 + 1, 2);\r\n            case \"G\": return timestamp.getHours();\r\n            case \"H\": return fix0(timestamp.getHours(), 2);\r\n            case \"i\": return fix0(timestamp.getMinutes(), 2);\r\n            case \"s\": return fix0(timestamp.getSeconds(), 2);\r\n            case \"T\": return Math.round(timestamp.getTime() / 1000);\r\n        }\r\n        return tag;\r\n    });\r\n}\n\n/**\r\n * 是否是正则\r\n * @param subject 待判断数据\r\n */\r\nfunction isRegexp(subject) {\r\n    return is(subject, \"regexp\");\r\n}\n\n/**\r\n * 是否是错误对象\r\n * @param subject 待判断数据\r\n */\r\nfunction isError(subject) {\r\n    return is(subject, \"error\");\r\n}\n\n/**\r\n * 是否是布尔值\r\n * @param  subject 待判断的数据\r\n */\r\nfunction isBoolean(subject) {\r\n    return is(subject, \"boolean\");\r\n}\n\n/**\r\n * 浮点数字精度处理\r\n * @param  num   待处理数字\r\n * @param  dec   精度\r\n * @return       处理后的数字\r\n */\r\nfunction getNumberWithDec(num, dec) {\r\n    var pow10s = Math.pow(10, dec || 0);\r\n    return (dec) ? Math.round(pow10s * num) / pow10s : num;\r\n}\n\n/**\r\n * 获取一组数组中的平均数\r\n * @param  arr 待处理数组\r\n * @param  dec 保留精度\r\n * @return     平均数\r\n */\r\nfunction getNumberAverage(arr, dec) {\r\n    var i = arr.length, sum = 0;\r\n    while (i--) {\r\n        sum += arr[i];\r\n    }\r\n    return getNumberWithDec((sum / arr.length), dec);\r\n}\n\n/**\r\n * 获取一组数组中的方差\r\n * @param  arr 待处理数组\r\n * @param  dec 保留精度\r\n * @return     方差\r\n */\r\nfunction getNumberVariance(arr, dec) {\r\n    var avg = getNumberAverage(arr, dec), i = arr.length, v = 0;\r\n    while (i--) {\r\n        v += Math.pow((arr[i] - avg), 2);\r\n    }\r\n    v /= (arr.length - 1);\r\n    return getNumberWithDec(v, dec);\r\n}\n\n/**\r\n * 获取一组数组中的标准差\r\n * @param  arr  待处理数组\r\n * @param  dec  保留精度\r\n * @return      标准差\r\n */\r\nfunction getStdDeviation(arr, dec) {\r\n    var stdDev = Math.sqrt(getNumberVariance(arr, dec));\r\n    return getNumberWithDec(stdDev, dec);\r\n}\n\n/**\r\n * 解析输入文本，输出带对应 kv 的对象\r\n * @param str        待处理字符串\r\n * @param separator  分割符号\r\n * @param assignment 赋值符号\r\n * @param ignore     需要排除的数据标识\r\n * @param decode     是否执行 decode 操作\r\n */\r\nfunction parseStr(str, separator, assignment, ignore, decode) {\n    if ( separator === void 0 ) separator = \"&\";\n    if ( assignment === void 0 ) assignment = \"=\";\n    if ( ignore === void 0 ) ignore = /^#/;\n    if ( decode === void 0 ) decode = true;\n\r\n    if (isString(str)) {\r\n        var subject = str.split(separator).reduce(function (res, part) {\r\n            if (ignore.test(part)) {\r\n                return res;\r\n            }\r\n            var partArr = part.split(assignment);\r\n            res[partArr[0]] = decode && !isUndefined(partArr[1]) ? decodeURIComponent(partArr[1]) : partArr[1];\r\n            return res;\r\n        }, Object.create(null));\r\n        return subject;\r\n    }\r\n    else {\r\n        return {};\r\n    }\r\n}\n\nfunction addQuery(url, query) {\r\n    var extQueryStr = \"\";\r\n    if (isObject(query)) {\r\n        extQueryStr = serialize(query);\r\n    }\r\n    return (\"\" + url + (url.indexOf(\"?\") !== -1 ? \"&\" : \"?\") + extQueryStr);\r\n}\n\nvar EXP_STR = \"Thu, 01 Jan 1970 00:00:00 GMT\";\r\n// cookie写操作，过期时间单位(s)\r\nfunction set(name, value, config) {\r\n    config = extend({\r\n        \"path\": \"/\"\r\n    }, config || {});\r\n    var defVal = {\r\n        \"path\": \"/\"\r\n    };\r\n    var cookie = [(name + \"=\" + value)];\r\n    Object.keys(config).forEach(function (key) {\r\n        if (key === \"expires\" && config.expires) {\r\n            return cookie.push(\"expires=\" + new Date(+new Date() + config.expires * 24 * 3600 * 1000).toUTCString());\r\n        }\r\n        cookie.push((key + \"=\" + (config[key] || defVal[key] || \"\")));\r\n    });\r\n    document.cookie = cookie.join(\";\");\r\n}\r\nfunction get(name) {\r\n    return document.cookie.replace(new RegExp(\".*(?:^|; )\" + name + \"=([^;]*).*|.*\"), \"$1\");\r\n}\r\nfunction remove(name, path) {\r\n    path = path || \"/\";\r\n    var value = get(name);\r\n    if (value) {\r\n        return document.cookie = name + \"=\" + value + \"; expires=\" + EXP_STR + \"; path=\" + path;\r\n    }\r\n}\r\nvar cookie = {\r\n    get: get,\r\n    set: set,\r\n    remove: remove\r\n};\n\nexport { addQuery, cookie, copy, date, each, extend, fix0, getNumberAverage, getNumberVariance, getNumberWithDec, getStdDeviation, is, isArray, isBoolean, isError, isFunction, isNull, isNumber, isObject, isRegexp, isString, isUndefined, isValidArray, labelReplace, labelReplaceExp, merge, numberFormat, parseStr, queryString, random, serialize, shuffle, toArray, toDate, toUnderlineName };\n//# sourceMappingURL=index.esm.js.map\n","import {\n    each,\n    merge,\n    isString,\n    isObject,\n    isUndefined,\n    queryString,\n    labelReplace,\n    labelReplaceExp,\n    isFunction\n} from \"@x-drive/utils\";\n\n/**自动提示用的浮层 */\nvar notification:any;\n\n/**接口错误时的提示信息 */\ntype ErrorMsg = {\n    /**错误详情 */\n    description: string;\n\n    /**错误信息 */\n    message: string;\n\n    /**提示类型 */\n    type: string;\n}\n\n\n/**出错信息提示格式化函数 */\nvar notificationMsgFormater = function (msg: ErrorMsg) {\n    return msg;\n}\n\ninterface AnySubject {\n    [key: string]: string;\n}\n\ninterface ApiSubject extends AnySubject {\n}\n\n/**请求钩子 */\ntype ReqHooks = {\n    /**请求前钩子 */\n    onRequest?: (config: ReqConf, params: ReqParams, data: ReqData) => void;\n    /**请求后钩子 */\n    onResponse?: (raw:string) => any;\n}\n\n/**请求实例设置 */\ntype ReqSetting = {\n    /**请求钩子 */\n    hooks?: ReqHooks;\n\n    /**数据字段映射 */\n    keys?:{\n        /**业务数据字段 */\n        data?:string;\n\n        /**状态码字段 */\n        code?:string;\n\n        /**返回信息字段 */\n        message?:string;\n\n        [key:string]: string;\n    };\n}\n\n/**所有 api 存储对象 */\nconst APIS: ApiSubject = {};\n\ntype HostSubject = {\n    [name: string]: string;\n}\n\n/**所有域名存储对象 */\nconst HOSTS: HostSubject = {};\n\n/**请求成功状态码 */\nvar CODE_SUCCESS: number | string = 1;\n\n/**请求方法判断正则 */\nconst REQ_METHOD_REQ_EXP: RegExp = /get|head|delete/;\n\n/**\n * 网络协议检测正则\n */\nconst PROTOCOL_REG_EXP: RegExp = /^http[s]?:/i;\n\n/**接口名称声明判断 */\nconst API_REQ_PATH_REG_EXP: RegExp = /^\\//i;\n\n/**\n * 请求配置\n */\ninterface ReqConf {\n    /**是否自动提示接口返回的信息 */\n    autoToast?: boolean;\n\n    /**请求数据类型 */\n    dataType?: string;\n\n    /**是否添加随机数 */\n    fresh?: boolean;\n\n    /**是否携带 cookie */\n    credentials?: boolean;\n\n    /**请求头设置 */\n    header?: object;\n\n    /**超时时间 */\n    timeout?: number;\n\n    /**是否返回原始数据 */\n    raw?: boolean;\n}\n\n/**\n * 请求参数 (query)\n */\ninterface ReqParams {\n    [propName: string]: any;\n}\n\n/**\n * 请求数据 (post)\n */\ninterface ReqData {\n    [propName: string]: any;\n}\n\n/**\n * 请求 promise 对象\n */\ninterface ReqPromise extends Promise<any> {\n    [propName: string]: any;\n}\n\n/**\n * 各个页面包含的请求\n */\nconst RequestQueue: object = {};\n\n/**\n * 加入到列表\n * @param  {Object} key 当前的页面对象\n * @param  {Object} val 请求对象\n */\nconst pushQueue = function (val: XMLHttpRequest) {\n    const pathname = window.location.pathname;\n    if (!RequestQueue[pathname]) {\n        RequestQueue[pathname] = [];\n    }\n    RequestQueue[pathname].push(val);\n}\n\n/**\n * 从列表删除一个请求\n * @param  {Object} key 当前页面对象\n * @param  {Object} val 请求对象\n */\nconst spliceQueue = function (val: XMLHttpRequest) {\n    const pathname = window.location.pathname;\n    if (RequestQueue[pathname] && RequestQueue[pathname].length) {\n        const index = RequestQueue[pathname].indexOf(val);\n        if (index !== -1) {\n            RequestQueue[pathname].splice(index, 1);\n        }\n    }\n}\n\n/**\n * 解析生成正确的数据请求地址\n * @param  {String} url    接口别名或具体的请求地址\n * @param  {Object} params 请求参数对象\n * @return {String}\n */\nexport function resloveUrl(uri: string, params?: ReqParams): string {\n    var oUri = uri;\n    uri = APIS[uri];\n    uri = uri || oUri;\n    if (isObject(params)) {\n        uri = uri.replace(labelReplaceExp, function (_, key) {\n            const re = params[key];\n            delete params[key];\n            return re;\n        })\n    }\n    return uri;\n}\n\n/**日志 */\nfunction log(...msg:any[]) {\n    console.log.call(console, \"%c[Request]\", \"color: cyan;\", ...msg);\n}\n\nclass Request {\n    /**默认请求配置 */\n    private defConf: ReqConf = {\n        \"autoToast\": true\n        , \"dataType\": \"json\"\n        , \"fresh\": true\n        , \"credentials\": false\n        , \"header\": {\n            \"X-Requested-With\": \"XMLHttpRequest\"\n        }\n        , \"timeout\": 10000\n        , \"raw\": false\n    }\n\n    /**请求钩子 */\n    hooks: ReqHooks = {};\n\n    /**字段映射对象 */\n    keys:{[key:string]: string} = {\n        \"data\": \"data\"\n        , \"code\": \"code\"\n        , \"message\": \"message\"\n    };\n\n    constructor() {\n        // @ts-ignore\n        var onRequest = (config: ReqConf, params: ReqParams, data: ReqData) => { };\n        var onResponse = (raw: string) => {\n            return raw;\n        }\n        // 默认 hook\n        this.hooks = {\n            onRequest\n            , onResponse\n        }\n    }\n\n    /**检测是否同域用的 a 标签 */\n    static A: any = document.createElement(\"a\");\n\n    /**\n     * 注册一个请求 api 模块\n     * @static\n     * @param  subject  模块 api 设置\n     * @param  host     api 请求域名\n     */\n    static register(subject: ApiSubject, host?: string): void {\n        if (isObject(subject)) {\n            each(subject, (val, key) => {\n                if (APIS[key]) {\n                    console.warn(`API ${key} 已被定义`);\n                } else {\n                    if (!API_REQ_PATH_REG_EXP.test(key)) {\n                        key = `/${key}`;\n                    }\n                    if (isString(host) && !PROTOCOL_REG_EXP.test(val)) {\n                        if (!API_REQ_PATH_REG_EXP.test(val)) {\n                            val = `/${val}`;\n                        }\n                        val = `${host}${val}`;\n                    } else if (!PROTOCOL_REG_EXP.test(val)) {\n                        // 如果接口不以 http 或 https 开头的，则尝试替换里面的占位符\n                        // 这里只替换可能存在的 host，所以必须保留其他任何未能解析的花括号\n                        val = labelReplace(val, HOSTS, true);\n                    }\n                    APIS[key] = val;\n                }\n            })\n        }\n    }\n\n    /**\n     * 放弃当前正在发起的所有请求\n     */\n    static cancel() {\n        const pathname = window.location.pathname;\n        var nowReqs = RequestQueue[pathname];\n        if (nowReqs && nowReqs.length) {\n            try {\n                for (var name in nowReqs) {\n                    let req = nowReqs[name];\n                    if (req) {\n                        req.abort();\n                    }\n                }\n            } catch (e) {\n                console.error(e);\n            }\n        }\n        RequestQueue[pathname] = [];\n    }\n\n    /**\n     * 生成一个 16 进制的随机数\n     */\n    static randomStr(): string {\n        return (Date.now() + Math.random()).toString(16);\n    }\n\n    /**\n     * 解析生成正确的数据请求地址\n     * @param  url    接口别名或具体的请求地址\n     * @param  params 请求参数对象\n     */\n    resolveUri(uri: string, params: object) {\n        return resloveUrl(uri, params);\n    }\n\n    /**\n     * 处理 post 数据\n     * @param data post 数据\n     * @return 处理过后的数据\n     */\n    private parseData(data: string | object) {\n        if (isString(data)) {\n            return (data as string).replace(/\\+/g, \"%2B\");\n        }\n        return JSON.stringify(data);\n    }\n\n    /**\n     * 将对象转化为 form data\n     * @param data 要转化成 form data 的数据\n     * @return form data\n     */\n    private parseFormData(data: object): FormData {\n        const fd = new FormData();\n        if (isObject(data)) {\n            each(data, (val: any, key: string) => {\n                fd.append(key, val);\n            })\n        }\n        return fd;\n    }\n\n    /**\n     * 判断是否处于同一个域名下\n     * @param url 待判断的地址\n     */\n    private checkOriginHost(url: string): boolean {\n        Request.A.href = url;\n        return Request.A.host === window.location.host;\n    }\n\n    /**\n     * 配置实例中的某些设置\n     * @param setting 实例配置对象\n     */\n    setting(setting?:ReqSetting) {\n        if (!isObject(setting)) {\n            return;\n        }\n        log(\"setting\",\"->\", setting);\n        if (isObject(setting.hooks)) {\n            this.hooks = merge(this.hooks, setting.hooks);\n        }\n\n        if (isObject(setting.keys)) {\n            this.keys = merge(this.keys, setting.keys);\n        }\n    }\n\n    /**\n     * 执行请求\n     * @param    type    请求类型\n     * @param    url     请求url或别名\n     * @param    param   请求参数\n     * @param    data    请求数据\n     * @param    config  请求配置\n     * @returns          请求 Promise 对象\n     */\n    run<T = AnySubject>(type: string, url: string, params: ReqParams = {}, data: ReqData = {}, config: ReqConf = {}): Promise<T> {\n        type = type.toLocaleLowerCase();\n\n        var reqConf: ReqConf = merge(\n            this.defConf\n            , config\n        )\n\n        if (reqConf.fresh) {\n            // 有强制刷新设置则自动追加随机数\n            params._ = Request.randomStr();\n        }\n\n        // 请求钩子\n        if (isFunction(this.hooks.onRequest)) {\n            this.hooks.onRequest.call(this, reqConf, params, data);\n        }\n\n        // 解析地址\n        url = this.resolveUri(url, params);\n        // 处理 query 参数\n        if (isObject(params)) {\n            url += `?${queryString(params)}`;\n        }\n\n        var xhr = new XMLHttpRequest();\n        var req: ReqPromise = new Promise((resolve: Function, reject: Function) => {\n            var reqData: string | FormData;\n            var header: object = reqConf.header;\n            const isCrossOrigin = !this.checkOriginHost(url);\n\n            if (!REQ_METHOD_REQ_EXP.test(type)) {\n                if (!header.hasOwnProperty(\"Content-Type\")) {\n                    header[\"Content-Type\"] = \"application/json\";\n                }\n                if (header[\"Content-Type\"] === null) {\n                    // formdata\n                    delete header[\"Content-Type\"];\n                    reqData = this.parseFormData(data);\n                } else {\n                    // 默认json\n                    reqData = this.parseData(data);\n                }\n            }\n\n            if (isCrossOrigin) {\n                if (config.credentials) {\n                    xhr.withCredentials = true;\n                }\n                delete header[\"X-Requested-With\"];\n            }\n\n            if (config.timeout) {\n                xhr.timeout = config.timeout;\n            }\n\n            xhr.open(type, url, true);\n\n            each(header, (val, key) => {\n                xhr.setRequestHeader(key, val);\n            });\n\n            const me = this;\n            xhr.onload = function () {\n                spliceQueue(this);\n                if (this.status >= 200 && this.status < 300 || this.status === 304) {\n                    var re: any = this.responseText;\n                    // 返回钩子\n                    if (isFunction(me.hooks.onResponse)) {\n                        me.hooks.onResponse.call(me, re);\n                    }\n\n                    if (reqConf.dataType === \"json\") {\n                        try {\n                            re = JSON.parse(re);\n                        } catch (err) {\n                            reject(err);\n                            return;\n                        }\n                    }\n\n                    const data = re[me.keys.data];\n                    const code = re[me.keys.code];\n\n                    if (Number(code) !== CODE_SUCCESS) {\n                        const message: string = re[me.keys.message];\n                        if (reqConf.autoToast && message && notification) {\n                            notification(\n                                notificationMsgFormater({\n                                    \"description\": message\n                                    , \"message\": \"请求错误\"\n                                    , \"type\": \"fail\"\n                                })\n                            );\n                        }\n                        return reject(re);\n                    }\n\n                    resolve(\n                        config.raw ? re : data || {}\n                    );\n                } else {\n                    reject(new Error(`Request Error, status [${this.status}]`));\n                }\n            }\n\n            xhr.ontimeout = xhr.onerror = function (e) {\n                spliceQueue(this);\n                reject(e);\n            }\n\n            xhr.send(reqData);\n        })\n\n        req.abort = function () {\n            xhr.abort();\n            spliceQueue(xhr);\n        }\n        pushQueue(xhr);\n        return req;\n    }\n\n    /**\n     * 发起一个 get 请求\n     * @param   url     请求url或别名\n     * @param   param   请求参数\n     * @param   config  请求配置\n     * @returns \n     */\n    get<T = AnySubject>(url: string, param?: ReqParams, config?: ReqConf) {\n        return this.run<T>(\"GET\", url, param, {}, config);\n    }\n\n    /**\n     * 发起一个 post 请求\n     * @param    url      请求url或别名\n     * @param    param    请求参数\n     * @param    data     请求数据\n     * @param    config   请求配置\n     * @returns\n     */\n    post<T = AnySubject>(url: string, param?: ReqParams, data?: ReqData, config?: ReqConf) {\n        if (isObject(param) && isUndefined(data)) {\n            data = param;\n            param = {};\n        }\n        if (isUndefined(data)) {\n            data = {};\n        }\n        return this.run<T>(\"POST\", url, param, data, config);\n    }\n}\n\nexport { Request as R };\n\ntype ConfigOption = {\n    /**请求成功时的状态码 */\n    successCode?: number|string;\n\n    /**域名配置 */\n    hosts?: HostSubject;\n\n    /**api 别名 */\n    apis?:ApiSubject;\n\n    /**提示浮层 */\n    notifyMod?:any;\n\n    /**提示信息格式化函数 */\n    notifyMsgFormater?: (msg: ErrorMsg) => any;\n}\n\n/**\n * 设置请求模块\n * @param config 模块配置\n */\nfunction config(config: ConfigOption) {\n    const { successCode, hosts, apis, notifyMod, notifyMsgFormater } = config;\n    \n    log(\"config\", \"->\", config);\n\n    if (!isUndefined(successCode)) {\n        CODE_SUCCESS = successCode;\n    }\n\n    if (isObject(hosts)) {\n        each(hosts, function (val, key) {\n            HOSTS[key] = val;\n        });\n    }\n\n    if (isObject(apis)) {\n        Request.register(apis)\n    }\n\n    if (!isUndefined(notifyMod)) {\n        notification = notifyMod;\n    }\n\n    if (isFunction(notifyMsgFormater)) {\n        notificationMsgFormater = notifyMsgFormater;\n    }\n}\nexport { config }\n\nexport default new Request();"],"names":[],"mappings":"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"}